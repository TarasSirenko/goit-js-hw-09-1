{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAmCA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,GACFI,EAAQ,C,SAAEN,E,MAAUC,IAEtBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAC1BA,EAAM,G,EAxCA,CACXQ,gBAAiBC,SAASC,cAAc,kBACxCC,eAAgBF,SAASC,cAAc,iBACvCE,eAAgBH,SAASC,cAAc,mBACvCG,KAAMJ,SAASC,cAAc,WAG1BG,KAAKC,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAMC,iBACN,MAAMC,EAAaC,SAASH,EAAMI,WAAW,GAAGC,OAC1CC,EAAYH,SAASH,EAAMI,WAAW,GAAGC,OACzCR,EAAiBM,SAASH,EAAMI,WAAW,GAAGC,QAItD,SAAoCpB,EAAOqB,EAAWT,GACpD,IAAIb,EAAW,EACf,IAAK,IAAIuB,EAAI,EAAGA,EAAIV,EAAgBU,IAElCvB,GAAY,EACZD,EAAcC,EAFdC,GAASqB,GAGNE,MAAK,EAACxB,SAAEA,EAAQC,MAAEA,MACjBJ,EAAA4B,OAAOC,QAAQ,uBAAuB1B,QAAeC,MAAU,IAEhE0B,OAAM,EAAC3B,SAAEA,EAAQC,MAAEA,MAClBJ,EAAA4B,OAAOG,QAAQ,sBAAsB5B,QAAeC,MAAU,G,CAbpE4B,CAA2BX,EAAYI,EAAWT,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport 'notiflix/dist/notiflix-3.2.5.min.css';\n\nconst refs = {\n  firstDelayInput: document.querySelector('[name=\"delay\"]'),\n  stepDelayInput: document.querySelector('[name=\"step\"]'),\n  amountPromises: document.querySelector('[name=\"amount\"]'),\n  form: document.querySelector('.form'),\n};\n\nrefs.form.addEventListener('submit', OnSubmitForm);\n\nfunction OnSubmitForm(event) {\n  event.preventDefault();\n  const firstDelay = parseInt(event.srcElement[0].value);\n  const stepDelay = parseInt(event.srcElement[1].value);\n  const amountPromises = parseInt(event.srcElement[2].value);\n  renderPromisesOnSubmitForm(firstDelay, stepDelay, amountPromises);\n}\n\nfunction renderPromisesOnSubmitForm(delay, stepDelay, amountPromises) {\n  let position = 0;\n  for (let i = 0; i < amountPromises; i++) {\n    delay += stepDelay;\n    position += 1;\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n      reject({ position, delay });\n    }, delay);\n  });\n}\n\n//  Задачи со старой программы ---------------------\n//  задача 1\n\n// const delay = ms => {\n//   return new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       resolve(ms);\n//     }, ms);\n//   });\n// };\n\n// const logger = time => Notify.success(`Resolved after ${time}ms`);\n\n// delay(2000).then(logger);\n// delay(1000).then(logger);\n// delay(1500).then(logger);\n\n//  Задача 2 -----------------\n// const users = [\n//   { name: 'Mango', active: true },\n//   { name: 'Poly', active: false },\n//   { name: 'Ajax', active: true },\n//   { name: 'Lux', active: false },\n// ];\n\n// const toggleUserState = (allUsers, userName) => {\n//   const updatedUsers = allUsers.map(user =>\n//     user.name === userName ? { ...user, active: !user.active } : user\n//   );\n//   return new Promise((resolve, reject) => {\n//     resolve(updatedUsers);\n//     reject(updatedUsers);\n//   });\n// };\n// const logger = updatedUsers => console.table(updatedUsers);\n\n// toggleUserState(users, 'Mango').then(logger);\n// toggleUserState(users, 'Lux').then(logger);\n\n// Задача 3\n\n// const randomIntegerFromInterval = (min, max) => {\n//   return Math.floor(Math.random() * (max - min + 1) + min);\n// };\n\n// const makeTransaction = ({ id }) => {\n//   const delay = randomIntegerFromInterval(200, 500);\n//   return new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       const canProcess = Math.random() > 0.3;\n\n//       if (canProcess) {\n//         resolve({ id, delay });\n//       } else {\n//         reject(id);\n//       }\n//     }, delay);\n//   });\n// };\n\n// const logSuccess = ({ id, delay }) => {\n//   console.log(`Transaction ${id} processed in ${delay}ms`);\n// };\n\n// const logError = id => {\n//   console.warn(`Error processing transaction ${id}. Please try again later.`);\n// };\n\n// makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\n// makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\n// makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\n// makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","firstDelayInput","document","querySelector","stepDelayInput","amountPromises","form","addEventListener","event","preventDefault","firstDelay","parseInt","srcElement","value","stepDelay","i","then","Notify","success","catch","failure","$47d4ff9957288465$var$renderPromisesOnSubmitForm"],"version":3,"file":"03-promises.23986f58.js.map"}